# Generated by Django 2.2.7 on 2019-11-20 07:46

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Catory Name')),
                ('is_active', models.BooleanField(verbose_name='Active Or Not?')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categorys',
                'db_table': '',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TimeStampModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'TimeStampModel',
                'verbose_name_plural': 'TimeStampModels',
                'db_table': '',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('timestampmodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.TimeStampModel')),
                ('name', models.CharField(max_length=120, verbose_name='Tag Name')),
                ('is_active', models.BooleanField(verbose_name='Active Or Not?')),
            ],
            options={
                'verbose_name': 'Tags',
                'verbose_name_plural': 'Tagss',
                'db_table': '',
                'managed': True,
            },
            bases=('blog.timestampmodel',),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', ckeditor.fields.RichTextField()),
                ('nick_name', models.CharField(blank=True, max_length=200, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': '',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('timestampmodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.TimeStampModel')),
                ('title', models.CharField(max_length=200, verbose_name='Blog Title')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('description', ckeditor.fields.RichTextField()),
                ('short_content', models.TextField(verbose_name='Short Content')),
                ('reading_time', models.CharField(max_length=30, verbose_name='Reading Time')),
                ('meta_description', models.CharField(max_length=150, verbose_name='Meta Description')),
                ('meta_tags', models.TextField(verbose_name='Meta Tags(sep in ,)')),
                ('image_url', models.URLField(blank=True, null=True, verbose_name='Image URL')),
                ('video_url', models.URLField(blank=True, null=True, verbose_name='Video URL')),
                ('published', models.BooleanField(default=False, verbose_name='Published ?')),
                ('order_by', models.IntegerField(default=1, verbose_name='Blog Order')),
                ('visitor_count', models.IntegerField(default=1, verbose_name='Visitor Count')),
                ('is_trending', models.BooleanField(default=False, verbose_name='Trending?')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured?')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_blogs', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blogs', to='blog.Category', verbose_name='Category')),
                ('tags', models.ManyToManyField(to='blog.Tags', verbose_name='Tag')),
            ],
            bases=('blog.timestampmodel',),
        ),
    ]
